(undo-tree-save-format-version . 1)
"67719b9fee927157d20db5366dcc2d9acc5beac0"
[nil nil nil nil (26858 52756 647952 827000) 0 nil]
([nil nil ((40865 . 40874) (t 26856 20181 236068 204000) 40834) nil (26858 52756 647951 940000) 0 nil])
([nil nil ((40874 . 40879)) nil (26858 52756 647948 658000) 0 nil])
([nil nil ((45332 . 45333) (t 26858 52756 653282 527000) 45332) nil (26858 52909 278817 489000) 0 nil])
([nil nil ((45333 . 45334)) nil (26858 52909 278817 178000) 0 nil])
([nil nil ((nil rear-nonsticky nil 47630 . 47631) (nil fontified nil 45334 . 47631) (45334 . 47631)) nil (26858 52909 278816 655000) 0 nil])
([nil nil ((47631 . 47632) 47630) nil (26858 52909 278813 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2397 . 2398) (nil fontified nil 2375 . 2398) (2375 . 2398) 2374 (t 26858 52909 284144 137000)) nil (26858 53047 986762 729000) 0 nil])
([nil nil ((2398 . 2400)) nil (26858 53047 986762 300000) 0 nil])
([nil nil ((#("src" 0 3 (fontified t)) . 2390) (undo-tree-id0 . -1) (undo-tree-id1 . -2) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 2391) nil (26858 53047 986761 712000) 0 nil])
([nil nil ((2390 . 2392)) nil (26858 53047 986748 142000) 0 nil])
([nil nil ((2392 . 2395)) nil (26858 53047 986744 253000) 0 nil])
([nil nil ((#("{
        'splitting_field_degree_est': deg_est,
        'unique_patterns': unique_patterns,
        'num_primes_tested': primes_used,
    }" 0 10 (fontified t) 10 38 (face font-lock-string-face fontified t) 38 57 (fontified t) 57 74 (face font-lock-string-face fontified t) 74 101 (fontified t) 101 120 (face font-lock-string-face fontified t) 120 135 (fontified t) 135 139 (fontified t) 139 140 (fontified t rear-nonsticky t)) . 47518) (undo-tree-id9 . -139) (undo-tree-id10 . -139) (undo-tree-id11 . -139) (undo-tree-id12 . -139) (undo-tree-id13 . -139) 47657 (t 26858 53047 991835 883000)) nil (26858 53775 112420 540000) 0 nil])
([nil nil ((47505 . 47514) 47445) nil (26858 53775 112417 834000) 0 nil])
([nil nil ((47507 . 47515) (#("        " 0 8 (fontified nil)) . 47506) (undo-tree-id8 . -8) (47514 . 47515)) nil (26858 53775 112416 915000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -47511) (undo-tree-id7 . -4) 47515) nil (26858 53775 112415 486000) 0 nil])
([nil nil ((47511 . 47517)) nil (26858 53775 112407 495000) 0 nil])
([nil nil ((nil rear-nonsticky nil 47656 . 47657) (nil fontified nil 47517 . 47657) (47517 . 47657) 47516) nil (26858 53775 112406 800000) 0 nil])
([nil nil ((47670 . 47673)) nil (26858 53775 112403 123000) 0 nil])
([nil nil ((47657 . 47662) (t 26858 53775 118704 79000) 47656) nil (26858 53790 287407 419000) 0 nil])
([nil nil ((47659 . 47663) (#("    " 0 4 (fontified nil)) . 47658) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (47662 . 47663)) nil (26858 53790 287406 796000) 0 nil])
([nil nil ((47663 . 47680)) nil (26858 53790 287404 482000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -47677) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -47678) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -47679) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 47680) nil (26858 53790 287403 722000) 0 nil])
([nil nil ((47677 . 47687)) nil (26858 53790 287394 706000) 0 nil])
([nil nil ((47687 . 47688)) nil (26858 53790 287391 435000) 0 nil])
([nil nil ((47658 . 47663) (t 26858 53790 293889 154000) 47658) nil (26858 53797 54976 272000) 0 nil])
([nil nil ((47663 . 47672)) nil (26858 53797 54975 492000) 0 nil])
([nil nil ((nil rear-nonsticky nil 47706 . 47707) (47703 . 47717)) nil (26858 53797 54972 705000) 0 nil])
([nil nil ((#("urn" 0 3 (face font-lock-keyword-face fontified t)) . 27295) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) 27297 (t 26858 53797 58971 660000)) nil (26858 53821 498863 318000) 0 nil])
([nil nil ((27295 . 27298)) nil (26858 53821 498861 607000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -27297) (undo-tree-id26 . -1) 27298) nil (26858 53821 498861 303000) 0 nil])
([nil nil ((27442 . 27447) 27441) nil (26858 53821 498860 203000) 0 nil])
([nil nil ((27444 . 27448) (#("    " 0 4 (fontified nil)) . 27443) (undo-tree-id25 . -4) (27447 . 27448)) nil (26858 53821 498859 281000) 0 nil])
([nil nil ((27448 . 27458)) nil (26858 53821 498850 204000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27506 . 27507) (nil fontified nil 27448 . 27507) (27448 . 27507) (t 26858 53821 527270 80000)) nil (26858 53842 998438 667000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -27448) (undo-tree-id31 . -4) 27444) nil (26858 53842 998438 159000) 0 nil])
([nil nil (27506) nil (26858 53842 998431 755000) 0 nil])
([nil nil ((27503 . 27507)) nil (26858 53842 998428 929000) 0 nil])
([nil nil ((46345 . 46350) (t 26858 53843 2532 13000) 46319) nil (26858 54082 902256 436000) 0 nil])
([nil nil ((46350 . 46361)) nil (26858 54082 902252 832000) 0 nil])
([nil nil ((46361 . 46371) (t 26858 54082 910457 938000)) nil (26858 54088 33566 877000) 0 nil])
([nil nil ((#("    assert None, \"HEREEE\"
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 25 (face font-lock-string-face fontified t) 25 26 (fontified t)) . 46346) (undo-tree-id32 . -24) (undo-tree-id33 . 1) (undo-tree-id34 . -25) (undo-tree-id35 . -24) (undo-tree-id36 . -24) (undo-tree-id37 . -24) (undo-tree-id38 . -24) (undo-tree-id39 . -24) (undo-tree-id40 . -26) 46370 (t 26858 54088 39520 496000)) nil (26858 54147 139025 239000) 0 nil])
([nil nil (29071) nil (26858 54694 726314 902000) 0 nil])
([nil nil ((29063 . 29064) (t 26858 54147 143539 435000)) nil (26858 54694 726314 642000) 0 nil])
([nil nil ((29162 . 29163)) nil (26858 54694 726314 162000) 0 nil])
([nil nil ((29181 . 29182)) nil (26858 54694 726310 833000) 0 nil])
([nil nil ((#("def recommend_and_update_prime_pool(cd, prime_pool=None, run_heavy=False, grh_fudge=10, debug=False):
    \"\"\"
    High-level convenience function to build SPLIT_POLY from cd, compute diagnostics,
    and filter the prime pool based on ramification and a GRH-based bound.

    This function updates search_common.PRIME_POOL in-place.

    Args:
        cd (CurveDataExt): The curve data object for the fibration.
        prime_pool (list, optional): A list of primes to start with.
                                     If None, uses search_common.PRIME_POOL.
        run_heavy (bool): If True, runs expensive Galois group and splitting field computations.
        grh_fudge (int): A fudge factor for the GRH prime bound.
        debug (bool): If True, prints verbose diagnostic information.

    Returns:
        list: The new, filtered list of primes.
    \"\"\"
    # 1. Use search_common.PRIME_POOL as the default source
    src_pool = list(prime_pool) if prime_pool is not None else list(getattr(search_common, 'PRIME_POOL', []))
    if debug:
        print(f\"[bounds] Starting with prime pool of {len(src_pool)} primes (max: {max(src_pool) if src_pool else 'N/A'})\")

    # 2. Build the polynomial whose roots are singular m-values
    try:
        SPLIT_POLY = build_split_poly_from_cd(cd, debug=debug)
    except RuntimeError as e:
        print(f\"[bounds] Could not build SPLIT_POLY, cannot filter primes. Error: {e}\")
        # Return original pool if we can't proceed
        return src_pool

    # 3. Compute diagnostics of the polynomial

    # compute cheap diag first
    diag = compute_poly_diagnostics(SPLIT_POLY, run_heavy=False, debug=debug)

    # if user asked for heavy, try safe wrapper with timeout and merge results:
    if run_heavy:
        diag.update(estimate_galois_signature_modp(SPLIT_POLY, primes_to_test=prime_pool, debug=debug))
        #heavy_info = safe_compute_splitting_field_info_subprocess(SPLIT_POLY, timeout=90, debug=debug)
        #if heavy_info:
        #    diag.update(heavy_info)
        #else:
        #if debug:
        #    print(\"[bounds] splitting_field / galois query timed out or failed; continuing with empirical heuristics.\")


    #diag = compute_poly_diagnostics(SPLIT_POLY, run_heavy=run_heavy, debug=debug)
    if debug:
        print(\"[bounds] Diagnostics summary:\", diag)

    # 4. Filter out ramified primes (divisors of the discriminant)
    D = diag.get('discriminant')
    if D is not None and D != 0 and False: # somehow this bad, so we disable it
        bad_primes = {int(p) for p in prime_divisors(ZZ(D))}
        filtered_pool = [p for p in src_pool if p not in bad_primes]
        if debug:
            print(f\"[bounds] Removed {len(bad_primes)} ramified primes. Pool size: {len(filtered_pool)}\")
    else:
        filtered_pool = list(src_pool)

    # 5. Apply optional GRH-based cap on prime size
    grh_bound = simple_grh_prime_bound(
        splitting_field_disc=diag.get('splitting_field_discriminant'),
        splitting_field_deg=diag.get('splitting_field_degree'),
        fudge=grh_fudge
    )
    if grh_bound is not None:
        if debug:
            print(f\"[bounds] Applying GRH-inspired prime bound: p <= {grh_bound}\")
        filtered_pool = [p for p in filtered_pool if p <= grh_bound]
        if debug:
            print(f\"[bounds] After GRH cap, pool size: {len(filtered_pool)} (max: {max(filtered_pool) if filtered_pool else 'N/A'})\")

    # 6. Filter by search_common.is_good_prime_for_surface
    final_pool = []
    if hasattr(search_common, 'is_good_prime_for_surface'):
        for p in filtered_pool:
            try:
                if search_common.is_good_prime_for_surface(cd, p):
                    final_pool.append(p)
                elif debug:
                    print(f\"[bounds] is_good_prime_for_surface rejected prime {p}\")
            except Exception as e:
                if debug:
                    print(f\"[bounds] is_good_prime_for_surface check failed for p={p}: {e}. Keeping prime.\")
                final_pool.append(p)
        if debug:
            print(f\"[bounds] After is_good_prime_for_surface filter, pool size: {len(final_pool)}\")
    else:
        final_pool = filtered_pool

    # 7. Update search_common.PRIME_POOL in-place
    new_pool = sorted(list(set(final_pool)))
    try:
        search_common.PRIME_POOL = new_pool
        if debug:
            print(f\"[bounds] Successfully updated search_common.PRIME_POOL.\")
    except Exception as e:
        raise RuntimeError(f\"[bounds] Failed to update search_common.PRIME_POOL: {e}\")

    return new_pool

" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 35 (face font-lock-function-name-face fontified t) 35 50 (fontified t) 50 51 (face font-lock-operator-face fontified t) 51 55 (face font-lock-constant-face fontified t) 55 66 (fontified t) 66 67 (face font-lock-operator-face fontified t) 67 72 (face font-lock-constant-face fontified t) 72 83 (fontified t) 83 84 (face font-lock-operator-face fontified t) 84 93 (fontified t) 93 94 (face font-lock-operator-face fontified t) 94 99 (face font-lock-constant-face fontified t) 99 106 (fontified t) 106 108 (face font-lock-doc-face fontified t) 108 109 (face font-lock-doc-face fontified t syntax-table (15)) 109 856 (face font-lock-doc-face fontified t) 856 857 (face font-lock-doc-face fontified t syntax-table (15)) 857 859 (face font-lock-doc-face fontified t) 859 864 (fontified t) 864 866 (face font-lock-comment-delimiter-face fontified t) 866 920 (face font-lock-comment-face fontified t) 920 924 (fontified t) 924 932 (face font-lock-variable-name-face fontified t) 932 933 (fontified t) 933 934 (face font-lock-operator-face fontified t) 934 935 (fontified t) 935 939 (face font-lock-builtin-face fontified t) 939 944 (fontified t) 944 952 (fontified t) 952 954 (face font-lock-keyword-face fontified t) 954 966 (fontified t) 966 968 (face font-lock-keyword-face fontified t) 968 969 (fontified t) 969 972 (face font-lock-keyword-face fontified t) 972 973 (fontified t) 973 977 (face font-lock-constant-face fontified t) 977 978 (fontified t) 978 982 (face font-lock-keyword-face fontified t) 982 983 (fontified t) 983 987 (face font-lock-builtin-face fontified t) 987 988 (fontified t) 988 995 (face font-lock-builtin-face fontified t) 995 1011 (fontified t) 1011 1023 (face font-lock-string-face fontified t) 1023 1030 (fontified t) 1030 1034 (fontified t) 1034 1036 (face font-lock-keyword-face fontified t) 1036 1052 (fontified t) 1052 1057 (face font-lock-builtin-face fontified t) 1057 1059 (fontified t) 1059 1097 (face font-lock-string-face fontified t) 1097 1098 (face nil fontified t) 1098 1101 (face font-lock-builtin-face fontified t) 1101 1112 (face nil fontified t) 1112 1126 (face font-lock-string-face fontified t) 1126 1127 (face nil fontified t) 1127 1130 (face font-lock-builtin-face fontified t) 1130 1141 (face nil fontified t) 1141 1143 (face font-lock-keyword-face fontified t) 1143 1153 (face nil fontified t) 1153 1157 (face font-lock-keyword-face fontified t) 1157 1160 (face nil fontified t) 1160 1161 (face font-lock-operator-face fontified t) 1161 1164 (face nil fontified t) 1164 1166 (face font-lock-string-face fontified t) 1166 1173 (fontified t) 1173 1175 (face font-lock-comment-delimiter-face fontified t) 1175 1233 (face font-lock-comment-face fontified t) 1233 1237 (fontified t) 1237 1240 (face font-lock-keyword-face fontified t) 1240 1250 (fontified t) 1250 1260 (face font-lock-variable-name-face fontified t) 1260 1261 (fontified t) 1261 1262 (face font-lock-operator-face fontified t) 1262 1297 (fontified t) 1297 1298 (face font-lock-operator-face fontified t) 1298 1309 (fontified t) 1309 1315 (face font-lock-keyword-face fontified t) 1315 1316 (fontified t) 1316 1328 (face font-lock-type-face fontified t) 1328 1329 (fontified t) 1329 1331 (face font-lock-keyword-face fontified t) 1331 1343 (fontified t) 1343 1348 (face font-lock-builtin-face fontified t) 1348 1350 (fontified t) 1350 1417 (face font-lock-string-face fontified t) 1417 1420 (face nil fontified t) 1420 1421 (face font-lock-string-face fontified t) 1421 1431 (fontified t) 1431 1433 (face font-lock-comment-delimiter-face fontified t) 1433 1474 (face font-lock-comment-face fontified t) 1474 1482 (fontified t) 1482 1488 (face font-lock-keyword-face fontified t) 1488 1503 (fontified t) 1503 1505 (face font-lock-comment-delimiter-face fontified t) 1505 1546 (face font-lock-comment-face fontified t) 1546 1551 (fontified t) 1551 1553 (face font-lock-comment-delimiter-face fontified t) 1553 1578 (face font-lock-comment-face fontified t) 1578 1582 (fontified t) 1582 1586 (face font-lock-variable-name-face fontified t) 1586 1587 (fontified t) 1587 1588 (face font-lock-operator-face fontified t) 1588 1635 (fontified t) 1635 1636 (face font-lock-operator-face fontified t) 1636 1641 (face font-lock-constant-face fontified t) 1641 1648 (fontified t) 1648 1649 (face font-lock-operator-face fontified t) 1649 1661 (fontified t) 1661 1663 (face font-lock-comment-delimiter-face fontified t) 1663 1737 (face font-lock-comment-face fontified t) 1737 1741 (fontified t) 1741 1743 (face font-lock-keyword-face fontified t) 1743 1755 (fontified t) 1755 1818 (fontified t) 1818 1832 (fontified t) 1832 1833 (face font-lock-operator-face fontified t) 1833 1838 (fontified t) 1838 1842 (fontified t) 1842 1843 (rear-nonsticky t fontified t) 1843 1845 (fontified t) 1845 1850 (fontified t) 1850 1851 (face font-lock-operator-face fontified t) 1851 1859 (fontified t) 1859 1867 (fontified t) 1867 1868 (face font-lock-comment-delimiter-face fontified t) 1868 1963 (face font-lock-comment-face fontified t) 1963 1971 (fontified t) 1971 1972 (face font-lock-comment-delimiter-face fontified t) 1972 1987 (face font-lock-comment-face fontified t) 1987 1995 (fontified t) 1995 2000 (face font-lock-comment-delimiter-face fontified t) 2000 2024 (face font-lock-comment-face fontified t) 2024 2032 (fontified t) 2032 2033 (face font-lock-comment-delimiter-face fontified t) 2033 2039 (face font-lock-comment-face fontified t) 2039 2047 (fontified t) 2047 2048 (face font-lock-comment-delimiter-face fontified t) 2048 2058 (face font-lock-comment-face fontified t) 2058 2066 (fontified t) 2066 2071 (face font-lock-comment-delimiter-face fontified t) 2071 2179 (face font-lock-comment-face fontified t) 2179 2185 (fontified t) 2185 2186 (face font-lock-comment-delimiter-face fontified t) 2186 2264 (face font-lock-comment-face fontified t) 2264 2268 (fontified t) 2268 2270 (face font-lock-keyword-face fontified t) 2270 2286 (fontified t) 2286 2291 (face font-lock-builtin-face fontified t) 2291 2292 (fontified t) 2292 2323 (face font-lock-string-face fontified t) 2323 2336 (fontified t) 2336 2338 (face font-lock-comment-delimiter-face fontified t) 2338 2399 (face font-lock-comment-face fontified t) 2399 2403 (fontified t) 2403 2404 (face font-lock-variable-name-face fontified t) 2404 2405 (fontified t) 2405 2406 (face font-lock-operator-face fontified t) 2406 2416 (fontified t) 2416 2430 (face font-lock-string-face fontified t) 2430 2436 (fontified t) 2436 2438 (face font-lock-keyword-face fontified t) 2438 2441 (fontified t) 2441 2443 (face font-lock-keyword-face fontified t) 2443 2444 (fontified t) 2444 2447 (face font-lock-keyword-face fontified t) 2447 2448 (fontified t) 2448 2452 (face font-lock-constant-face fontified t) 2452 2453 (fontified t) 2453 2456 (face font-lock-keyword-face fontified t) 2456 2459 (fontified t) 2459 2461 (face font-lock-operator-face fontified t) 2461 2464 (fontified t) 2464 2467 (face font-lock-keyword-face fontified t) 2467 2468 (fontified t) 2468 2473 (face font-lock-constant-face fontified t) 2473 2475 (fontified t) 2475 2477 (face font-lock-comment-delimiter-face fontified t) 2477 2512 (face font-lock-comment-face fontified t) 2512 2520 (fontified t) 2520 2530 (face font-lock-variable-name-face fontified t) 2530 2531 (fontified t) 2531 2532 (face font-lock-operator-face fontified t) 2532 2534 (fontified t) 2534 2537 (face font-lock-builtin-face fontified t) 2537 2541 (fontified t) 2541 2544 (face font-lock-keyword-face fontified t) 2544 2547 (fontified t) 2547 2549 (face font-lock-keyword-face fontified t) 2549 2557 (fontified t) 2557 2573 (fontified t) 2573 2581 (fontified t) 2581 2594 (face font-lock-variable-name-face fontified t) 2594 2595 (fontified t) 2595 2596 (face font-lock-operator-face fontified t) 2596 2600 (fontified t) 2600 2603 (face font-lock-keyword-face fontified t) 2603 2606 (fontified t) 2606 2608 (face font-lock-keyword-face fontified t) 2608 2618 (fontified t) 2618 2620 (face font-lock-keyword-face fontified t) 2620 2623 (fontified t) 2623 2626 (face font-lock-keyword-face fontified t) 2626 2627 (fontified t) 2627 2629 (face font-lock-keyword-face fontified t) 2629 2650 (fontified t) 2650 2652 (face font-lock-keyword-face fontified t) 2652 2672 (fontified t) 2672 2677 (face font-lock-builtin-face fontified t) 2677 2679 (fontified t) 2679 2697 (face font-lock-string-face fontified t) 2697 2698 (face nil fontified t) 2698 2701 (face font-lock-builtin-face fontified t) 2701 2714 (face nil fontified t) 2714 2743 (face font-lock-string-face fontified t) 2743 2744 (face nil fontified t) 2744 2747 (face font-lock-builtin-face fontified t) 2747 2763 (face nil fontified t) 2763 2764 (face font-lock-string-face fontified t) 2764 2770 (fontified t) 2770 2774 (face font-lock-keyword-face fontified t) 2774 2784 (fontified t) 2784 2797 (face font-lock-variable-name-face fontified t) 2797 2798 (fontified t) 2798 2799 (face font-lock-operator-face fontified t) 2799 2800 (fontified t) 2800 2804 (face font-lock-builtin-face fontified t) 2804 2820 (fontified t) 2820 2822 (face font-lock-comment-delimiter-face fontified t) 2822 2868 (face font-lock-comment-face fontified t) 2868 2872 (fontified t) 2872 2881 (face font-lock-variable-name-face fontified t) 2881 2882 (fontified t) 2882 2883 (face font-lock-operator-face fontified t) 2883 2936 (fontified t) 2936 2937 (face font-lock-operator-face fontified t) 2937 2946 (fontified t) 2946 2976 (face font-lock-string-face fontified t) 2976 3006 (fontified t) 3006 3007 (face font-lock-operator-face fontified t) 3007 3016 (fontified t) 3016 3040 (face font-lock-string-face fontified t) 3040 3056 (fontified t) 3056 3057 (face font-lock-operator-face fontified t) 3057 3077 (fontified t) 3077 3079 (face font-lock-keyword-face fontified t) 3079 3090 (fontified t) 3090 3092 (face font-lock-keyword-face fontified t) 3092 3093 (fontified t) 3093 3096 (face font-lock-keyword-face fontified t) 3096 3097 (fontified t) 3097 3101 (face font-lock-constant-face fontified t) 3101 3111 (fontified t) 3111 3113 (face font-lock-keyword-face fontified t) 3113 3133 (fontified t) 3133 3138 (face font-lock-builtin-face fontified t) 3138 3140 (fontified t) 3140 3190 (face font-lock-string-face fontified t) 3190 3201 (face nil fontified t) 3201 3202 (face font-lock-string-face fontified t) 3202 3212 (fontified t) 3212 3225 (face font-lock-variable-name-face fontified t) 3225 3226 (fontified t) 3226 3227 (face font-lock-operator-face fontified t) 3227 3231 (fontified t) 3231 3234 (face font-lock-keyword-face fontified t) 3234 3237 (fontified t) 3237 3239 (face font-lock-keyword-face fontified t) 3239 3254 (fontified t) 3254 3256 (face font-lock-keyword-face fontified t) 3256 3259 (fontified t) 3259 3261 (face font-lock-operator-face fontified t) 3261 3281 (fontified t) 3281 3283 (face font-lock-keyword-face fontified t) 3283 3303 (fontified t) 3303 3308 (face font-lock-builtin-face fontified t) 3308 3310 (fontified t) 3310 3346 (face font-lock-string-face fontified t) 3346 3347 (face nil fontified t) 3347 3350 (face font-lock-builtin-face fontified t) 3350 3359 (face nil fontified t) 3359 3366 (fontified t face nil) 3366 3373 (fontified t face font-lock-string-face) 3373 3374 (fontified t face nil) 3374 3377 (fontified t face font-lock-builtin-face) 3377 3393 (fontified t face nil) 3393 3395 (fontified t face font-lock-keyword-face) 3395 3410 (fontified t face nil) 3410 3414 (fontified t face font-lock-keyword-face) 3414 3417 (fontified t face nil) 3417 3418 (fontified t face font-lock-operator-face) 3418 3421 (fontified t face nil) 3421 3423 (fontified t face font-lock-string-face) 3423 3425 (fontified t) 3425 3430 (fontified t) 3430 3432 (face font-lock-comment-delimiter-face fontified t) 3432 3485 (face font-lock-comment-face fontified t) 3485 3489 (fontified t) 3489 3499 (face font-lock-variable-name-face fontified t) 3499 3500 (fontified t) 3500 3501 (face font-lock-operator-face fontified t) 3501 3509 (fontified t) 3509 3511 (face font-lock-keyword-face fontified t) 3511 3512 (fontified t) 3512 3519 (face font-lock-builtin-face fontified t) 3519 3535 (fontified t) 3535 3562 (face font-lock-string-face fontified t) 3562 3573 (fontified t) 3573 3576 (face font-lock-keyword-face fontified t) 3576 3579 (fontified t) 3579 3581 (face font-lock-keyword-face fontified t) 3581 3609 (fontified t) 3609 3612 (face font-lock-keyword-face fontified t) 3612 3630 (fontified t) 3630 3632 (face font-lock-keyword-face fontified t) 3632 3738 (fontified t) 3738 3742 (face font-lock-keyword-face fontified t) 3742 3770 (fontified t) 3770 3775 (face font-lock-builtin-face fontified t) 3775 3777 (fontified t) 3777 3828 (face font-lock-string-face fontified t) 3828 3831 (face nil fontified t) 3831 3832 (face font-lock-string-face fontified t) 3832 3846 (fontified t) 3846 3852 (face font-lock-keyword-face fontified t) 3852 3853 (fontified t) 3853 3862 (face font-lock-type-face fontified t) 3862 3863 (fontified t) 3863 3865 (face font-lock-keyword-face fontified t) 3865 3885 (fontified t) 3885 3887 (face font-lock-keyword-face fontified t) 3887 3915 (fontified t) 3915 3920 (face font-lock-builtin-face fontified t) 3920 3922 (fontified t) 3922 3977 (face font-lock-string-face fontified t) 3977 3980 (face nil fontified t) 3980 3982 (face font-lock-string-face fontified t) 3982 3985 (face nil fontified t) 3985 4002 (face font-lock-string-face fontified t) 4002 4049 (fontified t) 4049 4051 (face font-lock-keyword-face fontified t) 4051 4071 (fontified t) 4071 4073 (face font-lock-builtin-face fontified t) 4073 4076 (face font-lock-builtin-face fontified t) 4076 4078 (fontified t) 4078 4139 (face font-lock-string-face fontified t) 4139 4140 (face nil fontified t) 4140 4143 (face font-lock-builtin-face fontified t) 4143 4156 (face nil fontified t) 4156 4157 (face font-lock-string-face fontified t) 4157 4159 (fontified t) 4159 4163 (fontified t) 4163 4167 (face font-lock-keyword-face fontified t) 4167 4177 (fontified t) 4177 4187 (face font-lock-variable-name-face fontified t) 4187 4188 (fontified t) 4188 4189 (face font-lock-operator-face fontified t) 4189 4209 (fontified t) 4209 4211 (face font-lock-comment-delimiter-face fontified t) 4211 4255 (face font-lock-comment-face fontified t) 4255 4259 (fontified t) 4259 4267 (face font-lock-variable-name-face fontified t) 4267 4268 (fontified t) 4268 4269 (face font-lock-operator-face fontified t) 4269 4270 (fontified t) 4270 4276 (face font-lock-builtin-face fontified t) 4276 4277 (fontified t) 4277 4281 (face font-lock-builtin-face fontified t) 4281 4282 (fontified t) 4282 4285 (face font-lock-builtin-face fontified t) 4285 4304 (fontified t) 4304 4307 (face font-lock-keyword-face fontified t) 4307 4331 (fontified t) 4331 4341 (face font-lock-variable-name-face fontified t) 4341 4342 (fontified t) 4342 4343 (face font-lock-operator-face fontified t) 4343 4361 (fontified t) 4361 4363 (face font-lock-keyword-face fontified t) 4363 4383 (fontified t) 4383 4388 (face font-lock-builtin-face fontified t) 4388 4390 (fontified t) 4390 4447 (face font-lock-string-face fontified t) 4447 4453 (fontified t) 4453 4459 (face font-lock-keyword-face fontified t) 4459 4460 (fontified t) 4460 4469 (face font-lock-type-face fontified t) 4469 4470 (fontified t) 4470 4472 (face font-lock-keyword-face fontified t) 4472 4484 (fontified t) 4484 4489 (face font-lock-keyword-face fontified t) 4489 4490 (fontified t) 4490 4502 (face font-lock-type-face fontified t) 4502 4504 (fontified t) 4504 4557 (face font-lock-string-face fontified t) 4557 4560 (face nil fontified t) 4560 4561 (face font-lock-string-face fontified t) 4561 4564 (fontified t) 4564 4568 (fontified t) 4568 4574 (face font-lock-keyword-face fontified t) 4574 4584 (fontified t) 4584 4585 (fontified t)) . 557) (undo-tree-id41 . -4584) (undo-tree-id42 . -4584) (undo-tree-id43 . -2307) (undo-tree-id44 . -4584) (undo-tree-id45 . -1547) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -608) (undo-tree-id49 . -1784) (undo-tree-id50 . -1775) (undo-tree-id51 . -1775) (undo-tree-id52 . -1775) (undo-tree-id53 . -1775) (undo-tree-id54 . -1775) (undo-tree-id55 . -1775) (undo-tree-id56 . -1775) (undo-tree-id57 . -4584) (undo-tree-id58 . -3067) (undo-tree-id59 . -1881) (undo-tree-id60 . -1881) (undo-tree-id61 . -1168) (undo-tree-id62 . -271) (undo-tree-id63 . -271) (undo-tree-id64 . -1881) (undo-tree-id65 . -1881) (undo-tree-id66 . -333) (undo-tree-id67 . -333) (undo-tree-id68 . -1881) (undo-tree-id69 . -1881) (undo-tree-id70 . -108) (undo-tree-id71 . -108) (undo-tree-id72 . -108) (undo-tree-id73 . -35) (undo-tree-id74 . -36) (undo-tree-id75 . -36) (undo-tree-id76 . -36) (undo-tree-id77 . -36) (undo-tree-id78 . -18) (undo-tree-id79 . -18) (undo-tree-id80 . -18) (undo-tree-id81 . -18) (undo-tree-id82 . -18) (undo-tree-id83 . -18) (undo-tree-id84 . -18) (undo-tree-id85 . -18) (undo-tree-id86 . -1233) (undo-tree-id87 . -2179) (undo-tree-id88 . -3067) (undo-tree-id89 . -4041) (undo-tree-id90 . -4584) (undo-tree-id91 . -4584) (undo-tree-id92 . -4585) 5141 (t 26858 54694 731329 27000)) nil (26858 54825 341813 797000) 0 nil])
([nil nil ((#("False" 0 5 (face font-lock-constant-face fontified t)) . 23052) (undo-tree-id93 . -4) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (t 26858 54825 418080 37000)) nil (26858 54970 828274 195000) 0 nil])
([nil nil ((23052 . 23056)) nil (26858 54970 828260 45000) 0 nil])
([nil nil ((#("False" 0 5 (face font-lock-constant-face fontified t)) . 34410) (undo-tree-id96 . -4) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -5) (undo-tree-id102 . -5) 34413 (t 26858 54970 904943 743000)) nil (26858 54990 412441 93000) 0 nil])
([nil nil ((34410 . 34414)) nil (26858 54990 412425 288000) 0 nil])
([nil current ((#("def estimate_galois_signature_modp(poly, primes_to_test=None, debug=False):
    \"\"\"
    Cheap empirical proxy for Galois/splitting-field complexity.
    Factors poly mod small primes and summarizes cycle-type distribution.

    Returns:
        dict with keys:
          - splitting_field_degree_est
          - avg_factor_count
          - unique_patterns (list of tuples)
    \"\"\"
    from sage.all import GF

    if primes_to_test is None:
        primes_to_test = [5,7,11,13,17,19,23,29] # DO NOT MODIFY

    deg = poly.degree()
    patterns = []
    total_factors = 0
    for p in primes_to_test:
        try:
            fp = poly.change_ring(GF(p))
            facs = [f[0].degree() for f in fp.factor()]
            total_factors += len(facs)
            patterns.append(tuple(sorted(facs)))
            if debug:
                print(f\"[bounds] mod {p} factor pattern:\", facs)
        except Exception as e:
            if debug:
                print(f\"[bounds] mod {p} factorization failed: {e}\")
            continue

    unique_patterns = sorted(set(patterns))
    avg_factor_count = total_factors / max(1, len(patterns))
    # rough proxy: typical splitting field degree is lcm of factor degrees
    from math import lcm
    deg_est = 1
    for pat in unique_patterns:
        for d in pat:
            deg_est = lcm(deg_est, d)
    ret = {
        'splitting_field_degree_est': deg_est,
        'avg_factor_count': avg_factor_count,
        'unique_patterns': unique_patterns,
    }

    print(\"\")
    print(\"DEBUG: RET:\", ret)
    print(\"\")

    return ret

" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 13 (face font-lock-function-name-face fontified t) 13 34 (face font-lock-function-name-face fontified t) 34 55 (fontified t) 55 56 (face font-lock-operator-face fontified t) 56 60 (face font-lock-constant-face fontified t) 60 67 (fontified t) 67 68 (face font-lock-operator-face fontified t) 68 73 (face font-lock-constant-face fontified t) 73 80 (fontified t) 80 82 (face font-lock-doc-face fontified t) 82 83 (face font-lock-doc-face fontified t syntax-table (15)) 83 378 (face font-lock-doc-face fontified t) 378 379 (face font-lock-doc-face fontified t syntax-table (15)) 379 381 (face font-lock-doc-face fontified t) 381 386 (fontified t) 386 390 (face font-lock-keyword-face fontified t) 390 396 (fontified t) 396 399 (face font-lock-builtin-face fontified t) 399 400 (fontified t) 400 406 (face font-lock-keyword-face fontified t) 406 415 (fontified t) 415 417 (face font-lock-keyword-face fontified t) 417 433 (fontified t) 433 435 (face font-lock-keyword-face fontified t) 435 436 (fontified t) 436 440 (face font-lock-constant-face fontified t) 440 450 (fontified t) 450 464 (face font-lock-variable-name-face fontified t) 464 465 (fontified t) 465 466 (face font-lock-operator-face fontified t) 466 491 (fontified t) 491 493 (face font-lock-comment-delimiter-face fontified t) 493 507 (face font-lock-comment-face fontified t) 507 512 (fontified t) 512 515 (face font-lock-variable-name-face fontified t) 515 516 (fontified t) 516 517 (face font-lock-operator-face fontified t) 517 536 (fontified t) 536 544 (face font-lock-variable-name-face fontified t) 544 545 (fontified t) 545 546 (face font-lock-operator-face fontified t) 546 554 (fontified t) 554 567 (face font-lock-variable-name-face fontified t) 567 568 (fontified t) 568 569 (face font-lock-operator-face fontified t) 569 576 (fontified t) 576 579 (face font-lock-keyword-face fontified t) 579 582 (fontified t) 582 584 (face font-lock-keyword-face fontified t) 584 609 (fontified t) 609 612 (face font-lock-keyword-face fontified t) 612 626 (fontified t) 626 628 (face font-lock-variable-name-face fontified t) 628 629 (fontified t) 629 630 (face font-lock-operator-face fontified t) 630 667 (fontified t) 667 671 (face font-lock-variable-name-face fontified t) 671 672 (fontified t) 672 673 (face font-lock-operator-face fontified t) 673 689 (fontified t) 689 692 (face font-lock-keyword-face fontified t) 692 695 (fontified t) 695 697 (face font-lock-keyword-face fontified t) 697 711 (fontified t) 711 723 (fontified t) 723 724 (face font-lock-variable-name-face fontified t) 724 736 (face font-lock-variable-name-face fontified t) 736 737 (fontified t) 737 739 (face font-lock-operator-face fontified t) 739 740 (fontified t) 740 743 (face font-lock-builtin-face fontified t) 743 778 (fontified t) 778 783 (face font-lock-builtin-face fontified t) 783 784 (fontified t) 784 790 (face font-lock-builtin-face fontified t) 790 811 (fontified t) 811 813 (face font-lock-keyword-face fontified t) 813 821 (fontified t) 821 837 (fontified t) 837 842 (face font-lock-builtin-face fontified t) 842 844 (fontified t) 844 858 (face font-lock-string-face fontified t) 858 861 (face nil fontified t) 861 878 (face font-lock-string-face fontified t) 878 886 (fontified t) 886 894 (fontified t) 894 900 (face font-lock-keyword-face fontified t) 900 901 (fontified t) 901 910 (face font-lock-type-face fontified t) 910 911 (fontified t) 911 913 (face font-lock-keyword-face fontified t) 913 929 (fontified t) 929 931 (face font-lock-keyword-face fontified t) 931 955 (fontified t) 955 960 (face font-lock-builtin-face fontified t) 960 962 (fontified t) 962 976 (face font-lock-string-face fontified t) 976 979 (face nil fontified t) 979 1002 (face font-lock-string-face fontified t) 1002 1005 (face nil fontified t) 1005 1006 (face font-lock-string-face fontified t) 1006 1020 (fontified t) 1020 1028 (face font-lock-keyword-face fontified t) 1028 1034 (fontified t) 1034 1049 (face font-lock-variable-name-face fontified t) 1049 1050 (fontified t) 1050 1051 (face font-lock-operator-face fontified t) 1051 1052 (fontified t) 1052 1058 (face font-lock-builtin-face fontified t) 1058 1059 (fontified t) 1059 1062 (face font-lock-builtin-face fontified t) 1062 1074 (fontified t) 1074 1078 (fontified t) 1078 1094 (face font-lock-variable-name-face fontified t) 1094 1095 (fontified t) 1095 1096 (face font-lock-operator-face fontified t) 1096 1111 (fontified t) 1111 1112 (face font-lock-operator-face fontified t) 1112 1113 (fontified t) 1113 1116 (face font-lock-builtin-face fontified t) 1116 1120 (fontified t) 1120 1123 (face font-lock-builtin-face fontified t) 1123 1135 (fontified t) 1135 1139 (fontified t) 1139 1141 (face font-lock-comment-delimiter-face fontified t) 1141 1210 (face font-lock-comment-face fontified t) 1210 1214 (fontified t) 1214 1218 (face font-lock-keyword-face fontified t) 1218 1224 (fontified t) 1224 1230 (face font-lock-keyword-face fontified t) 1230 1239 (fontified t) 1239 1246 (face font-lock-variable-name-face fontified t) 1246 1247 (fontified t) 1247 1248 (face font-lock-operator-face fontified t) 1248 1255 (fontified t) 1255 1258 (face font-lock-keyword-face fontified t) 1258 1263 (fontified t) 1263 1265 (face font-lock-keyword-face fontified t) 1265 1291 (fontified t) 1291 1294 (face font-lock-keyword-face fontified t) 1294 1297 (fontified t) 1297 1299 (face font-lock-keyword-face fontified t) 1299 1317 (fontified t) 1317 1324 (face font-lock-variable-name-face fontified t) 1324 1325 (fontified t) 1325 1326 (face font-lock-operator-face fontified t) 1326 1343 (fontified t) 1343 1347 (fontified t) 1347 1350 (face font-lock-variable-name-face fontified t) 1350 1351 (fontified t) 1351 1352 (face font-lock-operator-face fontified t) 1352 1355 (fontified t) 1355 1363 (fontified t) 1363 1391 (face font-lock-string-face fontified t) 1391 1410 (fontified t) 1410 1428 (face font-lock-string-face fontified t) 1428 1456 (fontified t) 1456 1473 (face font-lock-string-face fontified t) 1473 1492 (fontified t) 1492 1497 (fontified t) 1497 1498 (fontified t) 1498 1499 (fontified t) 1499 1503 (fontified t) 1503 1508 (face font-lock-builtin-face fontified t) 1508 1509 (fontified t) 1509 1511 (face font-lock-string-face fontified t) 1511 1513 (fontified t) 1513 1517 (fontified t) 1517 1522 (face font-lock-builtin-face fontified t) 1522 1523 (fontified t) 1523 1536 (face font-lock-string-face fontified t) 1536 1547 (fontified t) 1547 1552 (face font-lock-builtin-face fontified t) 1552 1553 (fontified t) 1553 1555 (face font-lock-string-face fontified t) 1555 1557 (fontified t) 1557 1558 (fontified t rear-nonsticky t) 1558 1562 (fontified t) 1562 1568 (face font-lock-keyword-face fontified t) 1568 1572 (fontified t) 1572 1573 (fontified t) 1573 1574 (fontified t)) . 21360) (undo-tree-id103 . -1573) (undo-tree-id104 . -1573) (undo-tree-id105 . -1573) (undo-tree-id106 . -1498) (undo-tree-id107 . -265) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -1573) (undo-tree-id116 . -614) (undo-tree-id117 . -1557) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -1573) (undo-tree-id121 . -1573) (undo-tree-id122 . -1574) 22933 (t 26858 54990 418314 741000)) nil (26858 55008 576947 776000) 0 nil])
nil
